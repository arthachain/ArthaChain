name: 🚀 Enterprise ArthaChain Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Deploy Version'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/arthachain-node
  HELM_VERSION: v3.12.0
  ISTIO_VERSION: 1.18.0

jobs:
  # 🔍 Security & Quality Gates
  security-scan:
    name: 🔒 Security & Quality Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install security tools
      run: |
        curl -sSf https://raw.githubusercontent.com/rust-lang/rust-clippy/master/rustup/install.sh | sh -s -- -y
        cargo install cargo-audit
        cargo install cargo-tarpaulin
        cargo install cargo-deny
    
    - name: Run Clippy
      run: |
        cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run security audit
      run: |
        cargo audit --deny warnings
    
    - name: Run dependency check
      run: |
        cargo deny check
    
    - name: Run code coverage
      run: |
        cargo tarpaulin --out Html --output-dir coverage
        cargo tarpaulin --out Xml --output-dir coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
    
    - name: Run SAST scan
      uses: github/codeql-action/init@v2
      with:
        languages: rust
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 🧪 Comprehensive Testing
  comprehensive-testing:
    name: 🧪 Comprehensive Testing Suite
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        rust-version: [stable, nightly]
        target: [x86_64-unknown-linux-gnu, x86_64-apple-darwin]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        target: ${{ matrix.target }}
        override: true
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config libssl-dev
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run unit tests
      run: |
        cargo test --all-features --verbose
    
    - name: Run integration tests
      run: |
        cargo test --test '*' --all-features --verbose
    
    - name: Run performance benchmarks
      run: |
        cargo bench --all-features
    
    - name: Run fuzz tests
      run: |
        cargo install cargo-fuzz
        cargo fuzz run --all-features
    
    - name: Run stress tests
      run: |
        cd blockchain_node
        cargo run --bin stress_test --release
    
    - name: Run load tests
      run: |
        cd blockchain_node
        cargo run --bin test_tps --release

  # 🏗️ Build & Package
  build-package:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [security-scan, comprehensive-testing]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-package]
    environment: staging
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Kubernetes tools
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        curl -LO "https://get.helm.sh/helm-${{ env.HELM_VERSION }}-linux-amd64.tar.gz"
        tar -xzf helm-${{ env.HELM_VERSION }}-linux-amd64.tar.gz
        sudo mv linux-amd64/helm /usr/local/bin/
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml
        kubectl config use-context staging
    
    - name: Deploy to staging
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/arthachain-deployment.yaml
        kubectl apply -f k8s/istio-virtual-service.yaml
        kubectl apply -f k8s/monitoring-stack.yaml
    
    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/arthachain-node -n arthachain
        kubectl wait --for=condition=available --timeout=300s deployment/prometheus -n monitoring
        kubectl wait --for=condition=available --timeout=300s deployment/grafana -n monitoring
    
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Test health endpoints
        kubectl run test-pod --image=curlimages/curl --rm -it --restart=Never -- \
          curl -f http://arthachain-node-service.arthachain.svc.cluster.local:8080/health
        
        kubectl run test-pod --image=curlimages/curl --rm -it --restart=Never -- \
          curl -f http://prometheus-service.monitoring.svc.cluster.local:9090/-/healthy
    
    - name: Notify staging deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "🚀 ArthaChain successfully deployed to staging environment!"
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: success()

  # 🚀 Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    environment: production
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Kubernetes tools
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        curl -LO "https://get.helm.sh/helm-${{ env.HELM_VERSION }}-linux-amd64.tar.gz"
        tar -xzf helm-${{ env.HELM_VERSION }}-linux-amd64.tar.gz
        sudo mv linux-amd64/helm /usr/local/bin/
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml
        kubectl config use-context production
    
    - name: Create production namespace
      run: |
        kubectl apply -f k8s/namespace.yaml
    
    - name: Deploy ArthaChain with blue-green strategy
      run: |
        # Deploy new version
        kubectl apply -f k8s/arthachain-deployment.yaml
        
        # Wait for new deployment to be ready
        kubectl wait --for=condition=available --timeout=600s deployment/arthachain-node -n arthachain
        
        # Update service to point to new version
        kubectl patch service arthachain-node-service -n arthachain -p '{"spec":{"selector":{"version":"v1.0.0"}}}'
        
        # Verify new deployment is working
        kubectl run test-pod --image=curlimages/curl --rm -it --restart=Never -- \
          curl -f http://arthachain-node-service.arthachain.svc.cluster.local:8080/health
    
    - name: Deploy monitoring stack
      run: |
        kubectl apply -f k8s/monitoring-stack.yaml
        
        # Wait for monitoring services
        kubectl wait --for=condition=available --timeout=300s deployment/prometheus -n monitoring
        kubectl wait --for=condition=available --timeout=300s deployment/grafana -n monitoring
        kubectl wait --for=condition=available --timeout=300s deployment/alertmanager -n monitoring
    
    - name: Deploy Istio configuration
      run: |
        kubectl apply -f k8s/istio-virtual-service.yaml
    
    - name: Run production validation tests
      run: |
        # Wait for services to be ready
        sleep 120
        
        # Test all endpoints
        kubectl run test-pod --image=curlimages/curl --rm -it --restart=Never -- \
          curl -f http://arthachain-node-service.arthachain.svc.cluster.local:8080/health
        
        kubectl run test-pod --image=curlimages/curl --rm -it --restart=Never -- \
          curl -f http://arthachain-node-service.arthachain.svc.cluster.local:8080/metrics
        
        # Test API endpoints
        kubectl run test-pod --image=curlimages/curl --rm -it --restart=Never -- \
          curl -f http://arthachain-node-service.arthachain.svc.cluster.local:8080/api/v1/blocks/latest
    
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "🎉 ArthaChain successfully deployed to production environment!"
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: success()

  # 📊 Post-Deployment Analysis
  post-deployment-analysis:
    name: 📊 Post-Deployment Analysis
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Kubernetes tools
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml
        kubectl config use-context production
    
    - name: Collect deployment metrics
      run: |
        # Get deployment status
        kubectl get pods -n arthachain -o wide
        kubectl get pods -n monitoring -o wide
        
        # Get service endpoints
        kubectl get endpoints -n arthachain
        kubectl get endpoints -n monitoring
        
        # Get resource usage
        kubectl top pods -n arthachain
        kubectl top pods -n monitoring
    
    - name: Generate deployment report
      run: |
        echo "# ArthaChain Production Deployment Report" > deployment-report.md
        echo "## Deployment Date: $(date)" >> deployment-report.md
        echo "## Version: ${{ needs.build-package.outputs.image-tag || 'Unknown' }}" >> deployment-report.md
        echo "## Status: SUCCESS" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "### Services Deployed:" >> deployment-report.md
        kubectl get deployments -n arthachain >> deployment-report.md
        kubectl get deployments -n monitoring >> deployment-report.md
        echo "" >> deployment-report.md
        echo "### Health Status:" >> deployment-report.md
        kubectl get pods -n arthachain -o custom-columns="NAME:.metadata.name,STATUS:.status.phase,READY:.status.readyReplicas" >> deployment-report.md
    
    - name: Upload deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment-report.md

  # 🔄 Rollback (if needed)
  rollback:
    name: 🔄 Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Kubernetes tools
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml
        kubectl config use-context production
    
    - name: Rollback deployment
      run: |
        # Rollback to previous version
        kubectl rollout undo deployment/arthachain-node -n arthachain
        
        # Wait for rollback to complete
        kubectl rollout status deployment/arthachain-node -n arthachain
        
        # Verify rollback
        kubectl run test-pod --image=curlimages/curl --rm -it --restart=Never -- \
          curl -f http://arthachain-node-service.arthachain.svc.cluster.local:8080/health
    
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "🔄 ArthaChain deployment rolled back due to failure!"
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
